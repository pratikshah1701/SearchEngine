package edu.calstatela.cs454.instructor.crawler;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.tika.exception.TikaException;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.html.HtmlParser;
import org.apache.tika.sax.BodyContentHandler;
import org.codehaus.jackson.JsonFactory;
import org.json.simple.JSONObject;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.codehaus.jackson.map.ObjectMapper;

public class Index {

    @SuppressWarnings("unchecked")
    public void listf( String directoryname, ArrayList<File> files )
        throws Exception
        
        
        {
            System.out.println( "inside listf" );
            // get all the files from a directory
            JSONObject obj = new JSONObject();
            File directory = new File( directoryname );
            File[] fList = directory.listFiles();
            for( File file : fList )
            {
                if( file.isFile() )
                {
                    files.add( file );
                     String files1 = files.toString();
                    obj.put( "path", files1 );
                    
                    File f = new File( "D:/Neil/linkshw3.json" );
                    //perform removing of \\ and brackets here //
                    String result = files1.replaceAll( "[,]", "" );
                   
                    
                    
                    BufferedWriter result = new BufferedWriter( new FileWriter( f,
                        true ) );
                    try
                    {
                        ObjectMapper mapper = new ObjectMapper();
                        result.write( mapper.writerWithDefaultPrettyPrinter()
                            .writeValueAsString( obj ) );
                        System.out.println( mapper.writerWithDefaultPrettyPrinter()
                            .writeValueAsString( obj ) );

                    }
                    catch( IOException e )
                    {
                        e.printStackTrace();

                    }
                    finally
                    {
                        result.flush();
                        result.close();

                    }
                    files.remove( file );

                }
                else if( file.isDirectory() )
                {
                    listf( file.getAbsolutePath(), files );
                }
            }

        }

        
        
        
        
        
        
        
        
        
   /* {
        System.out.println( "inside listf" );
        // get all the files from a directory
        JSONObject obj = new JSONObject();
        File directory = new File( directoryname );
        File[] fList = directory.listFiles();
        for( File file : fList )
        {
            if( file.isFile() )
            {
                files.add( file );
                obj.put( "path", files );
                File f = new File( "D:/Neil/linkshw3.json" );
                //perform removing of \\ and brackets here \
                BufferedWriter file1 = new BufferedWriter( new FileWriter( f,
                    true ) );
                try
                {
                    ObjectMapper mapper = new ObjectMapper();
                    file1.write( mapper.writerWithDefaultPrettyPrinter()
                        .writeValueAsString( obj ) );
                    System.out.println( mapper.writerWithDefaultPrettyPrinter()
                        .writeValueAsString( obj ) );

                }
                catch( IOException e )
                {
                    e.printStackTrace();

                }
                finally
                {
                    file1.flush();
                    file1.close();

                }
                files.remove( file );

            }
            else if( file.isDirectory() )
            {
                listf( file.getAbsolutePath(), files );
            }
        }

    }*/

    @SuppressWarnings("unchecked")
    public void index( String c, String stw, String index, String rank )
        throws IOException
    {
        System.out.println( "test inside index" );
        ArrayList<String> ranking = new ArrayList<String>();
        final InputStream in = new FileInputStream( "D:/Neil/" + c );
        try
        {
            for( @SuppressWarnings("rawtypes")
            // iterate over files
            Iterator it = new ObjectMapper().readValues(
                new JsonFactory().createJsonParser( in ), Map.class ); it.hasNext(); )
            {
                System.out.println( "it has next" + it.hasNext() );
                LinkedHashMap<String, String> keyValue = (LinkedHashMap<String, String>) it.next();
                System.out.println( "path " + keyValue.get( "path" ) );
                System.out.println( "Title" + keyValue.get( "title" ) );

                try
                {

                    InputStream input = new FileInputStream(
                        keyValue.get( "path" ) );
                    ContentHandler handler = new BodyContentHandler();
                    Metadata metadata = new Metadata();
                    // Parser initialize
                    new HtmlParser().parse( input, handler, metadata,
                        new ParseContext() );
                    System.out.println( "Handler" + handler );
                    System.out.println( "Meta Data :" + metadata );
                    System.out.println( "new parse context"
                        + new ParseContext() );

                    String plainText = handler.toString();
                    System.out.println( "Plain Text : Handler to String"
                        + handler.toString() );
                    JSONObject obj = new JSONObject();
                    ArrayList<String> meta = new ArrayList<String>();
                    // iterate over metadata and add metadata values to meta
                    // array
                    for( int i = 0; i < metadata.names().length; i++ )
                    {
                        String name = metadata.names()[i];
                        System.out.println( "metadata names"
                            + metadata.names()[i] );
                        meta.add( metadata.get( name ) );
                    }
                    String listString = "";
                    // seperate sentences
                    for( String s : meta )
                    {
                        listString += s + "\t";
                    }
                    // concate metadata and body content of html
                    String indexing = listString + plainText;
                    String result = indexing.replaceAll( "[,]", "" );
                    // seperate sentences to single words
                    String[] stringArray = result.split( "\\s+" );
                    List<String> wordList = Arrays.asList( stringArray );

                    // add words if not in ranking array
                    for( String word : stringArray )
                    {

                        if( !ranking.contains( word ) )
                        {
                            ranking.add( word );
                        }

                        ArrayList<String> Stop_Words_List = new ArrayList<String>();

                        FileInputStream fstream = new FileInputStream(
                            "D:/Neil/" + stw );
                        BufferedReader br = new BufferedReader(
                            new InputStreamReader( fstream ) );

                        String strLine;

                        // Read File Line By Line
                        while( (strLine = br.readLine()) != null )
                        {

                            Stop_Words_List.add( strLine.toLowerCase() );

                        }

                        // Close the input stream
                        br.close();
                        // perform frequency and meta data extraction if word
                        // not in stop words file
                        if( !Stop_Words_List.contains( word ) )
                        {

                            String Word = word.toLowerCase();
                            obj.put( "link", keyValue.get( "path" ) );
                            obj.put( "title", keyValue.get( "title" ) );
                            obj.put( "url", keyValue.get( "url" ) );
                            obj.put( "word", Word );
                            obj.put( "frequency",
                                Collections.frequency( wordList, word ) );

                        }

                        File f2 = new File( "D:/Neil/Indexed.json" );
                        BufferedWriter file2 = new BufferedWriter(
                            new FileWriter( f2, true ) );
                        try
                        {
                            // write to new index json file
                            ObjectMapper mapper = new ObjectMapper();
                            file2.write( mapper.writerWithDefaultPrettyPrinter()
                                .writeValueAsString( obj ) );
                            System.out.println( mapper.writerWithDefaultPrettyPrinter()
                                .writeValueAsString( obj ) );
                            file2.newLine();
                            file2.newLine();

                        }
                        catch( IOException e )
                        {
                            e.printStackTrace();

                        }
                        finally
                        {
                            file2.flush();
                            file2.close();
                        }
                    }

                }
                catch( FileNotFoundException e )
                {

                }
                catch( Exception e )
                {

                }
            }

        }
        finally
        {

            in.close();
        }
    }

    public static void main( String[] args ) throws IOException, SAXException,
        TikaException
    {

        // To Crawl documents inside folders of folders
        ArrayList<File> files = new ArrayList<File>();
        String directoryname = "D:/Neil/en";
        Index f = new Index();
        try
        {
            f.listf( directoryname, files );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }

        System.out.println( "test" );
        String controlfile = "linkshw3.json";
        String stw = "Stop_Words_List.txt";
        String index = "index.json";
        String rank = "rank";

        new Index().index( controlfile, stw, index, rank );

        /*
         * GetOpt options = new GetOpt( "c:s:i:r:H", args ); //Get the arguments
         * specified for each option. String controlfile =
         * options.getOptionParam('c'); String stw =
         * options.getOptionParam('s'); String index = options.getOptionParam(
         * 'i' ); String rank = options.getOptionParam( 'r' );
         */

        /*
         * String controlfile = args[0]; String stw = args[1]; String index =
         * args[2]; String rank = args[3];
         */

        /*
         * File f2 = new File(index);
         * 
         * // String controlfile = args[0]; if(f2.exists()) { f2.delete(); }
         */

        /*
         * File f3 = new File(rank);
         * 
         * if(f3.exists()){ f3.delete(); }
         */
        // new Rank().rank(rank);
        // new Ranktest().rank2("alliance");

    }
}
